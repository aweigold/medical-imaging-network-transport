#summary This documentation describes how to run the various MINT Conformance Tools.

<wiki:toc max_depth="3" />

= Setting up your environment =

The MINT Conformance tools require [http://www.python.org Python2.6.2] or later. Currently the tools are run directly from the MINTConformance package in a subversion trunk (installation scripts will be provided later). In order to run the tools, the *PYTHONPATH* environment variable must be set to point to the python source code. The python application must also be in your *PATH*. For example, if *MC_HOME* is the path to your subversion trunk, then set your PYTHONPATH as follows:

*Unix*
{{{
PATH=${PATH}:/pub/python/bin
PYTHONPATH=$MC_HOME/MINTConformance/src
}}}

*Windows*
{{{
set PATH=%PATH%;C:\Python2.6
set PYTHONPATH=%MC_HOME%\MINTConformance\src
}}}

--------------------

= MINTConformance Tools =

The MINTConformance package was developed based on the draft [http://groups.google.com/group/mint-user/files MINT Conformance Test] Power Point specification located in the [http://groups.google.com mint-user Google Group]. It currently consists of three tools.

== Mint Study Compare ==

The [http://code.google.com/p/medical-imaging-network-transport/source/browse/trunk/MINTConformance/src/org/nema/medical/mint/MintStudyCompare.py  MintStudyCompare.py] tool is a smart python application that compares two MINT studies by parsing the metadata.xml files and doing a byte by byte comparison for each of the binary items. This tool checks that the MINT studies are equivalent and is tolerant to minor formatting differences and attribute sorting.

Launch the tool by using the _python_ command to parse the file. This tool should run either in a Unix or Windows command shell.

Running the tool with no arguments displays the usage:

{{{
> python $MC_HOME/MINTConformance/src/org/nema/medical/mint/MintStudyCompare.py
Usage: MintStudyCompare.py [options] <old_mint_study_dir> <new_mint_study_dir>
  -v: verbose
  -l: lazy check (skips binary content)
  -h: displays usage
}}}

The verbose flag turns on output to show how many tags and bytes were compared. Otherwise nothing is displayed when there are no differences. You can optionally skip checking the binary to save time when debugging. 

{{{
> cd $MINT_HOME/testdata/MINT/Simple/DICOM
> python $MC_HOME/MINTConformance/src/org/nema/medical/mint/MintStudyCompare.py -v . .
        12 study attribute(s) compared.
         2 series compared.
        14 series attribute(s) compared.
       102 normalized instance attribute(s) compared.
         4 instance(s) compared.
        24 instance attribute(s) compared.
         4 binary item(s) compared.
   2097152 byte(s) compared.
}}}

To see all the differences the application should be run twice, switching the command line arguments. This will find all the tags that may be present in one study but not the other.

{{{
> cd $MINT_HOME/testdata/MINT
> python $MC_HOME/MINTConformance/src/org/nema/medical/mint/MintStudyCompare.py Simple/DICOM Simple/DICOM
Series (1.2.392.200036.9116.2.2.2.1762893313.1029997326.946350) Normalized Instance Attribute : tag=00080008 vr=CS val=ORIGINAL\PRIMARY\AXIAL != tag=00080008 vr=CS val=ORIGINAL
Series (1.2.392.200036.9116.2.2.2.1762893313.1029997326.946350) Normalized Instance Attribute : tag=00200020 vr=CS val=L\P != tag=00200020 vr=CS val=L
Series (1.2.392.200036.9116.2.2.2.1762893313.1029997326.946350) Normalized Instance Attribute : tag=00200037 vr=DS val=1.000000\0.000000\0.000000\0.000000\1.000000\0.000000 != tag=00200037 vr=DS val=1.000000
...
2.dat size : 524288 != 524287
        12 study attribute(s) compared.
         2 series compared.
        14 series attribute(s) compared.
       102 normalized instance attribute(s) compared.
         4 instance(s) compared.
        24 instance attribute(s) compared.
         4 binary item(s) compared.
   1572864 byte(s) compared.
17 difference(s) found.
}}}

== Mint Dicom Compare ==

The [http://code.google.com/p/medical-imaging-network-transport/source/browse/trunk/MINTConformance/src/org/nema/medical/mint/MintDicomCompare.py MintDicomCompare.py] tool is a smart python application that compares a DICOM study to a MINT study by parsing the data elements in the DICOM and comparing them to the metadata and binary items in the MINT study.

There are some subtle differences between the DICOM and MINT representations if you are using another tool for comparison. Some binary VRs are represented as text in MINT for clarity ("SS", "US", "SL", "UL", "FL", "FD", "OF", "AT") so the values will not compare directly to the DICOM binaries. Arrays of these primitive types are represented as strings with the values separated by a "\" delimiter (ie. 208.55017\166.19896). Note that the precision for floating point representations is set to 6.

Launch the tool by using the _python_ command to parse the file. This tool should run either in a Unix or Windows command shell.

Running the tool with no arguments displays the usage:

{{{
> python $MC_HOME/MINTConformance/src/org/nema/medical/mint/MintDicomCompare.py
Usage: MintDicomCompare.py [options] <dicom_study_dir> <mint_study_dir> <data_dictionary.xml>
  -v: verbose
  -l: lazy check (skips binary content)
  -h: displays usage
}}}

The verbose flag turns on output to show how many tags and bytes were compared. Otherwise nothing is displayed when there are no differences. You can optionally skip checking the binary to save time when debugging. The data dictionary is required for looking up implicit VRs based on the group-element tag.

{{{
> cd $MINT_HOME/testdata
> python $MC_HOME/MINTConformance/src/org/nema/medical/mint/MintDicomCompare.py -v DICOM MINT/Simple/DICOM DICOMDictionary.xml
- Study Instance UID 1.2.392.200036.9116.2.2.2.1762893313.1029997326.945873
 - Series Instance UID 1.2.392.200036.9116.2.2.2.1762893313.1029997326.946350
  - SOP Instance UID 1.2.392.200036.9116.2.2.2.1762660474.1026398161.357037
+++ 00280002 Value :  != 1
- Study Instance UID 1.2.392.200036.9116.2.2.2.1762893313.1029997326.945873
 - Series Instance UID 1.2.392.200036.9116.2.2.2.1762893313.1029997326.946350
  - SOP Instance UID 1.2.392.200036.9116.2.2.2.1762660474.1026398161.357037
+++ 00280006 Value :  != 0
- Study Instance UID 1.2.392.200036.9116.2.2.2.1762893313.1029997326.945873
 - Series Instance UID 1.2.392.200036.9116.2.2.2.1762893313.1029997326.946350
  - SOP Instance UID 1.2.392.200036.9116.2.2.2.1762660474.1026398161.357037
+++ 00280010 Value : 
...
         4 instance(s) compared.
        32 tag(s) skipped.
       300 text tag(s) compared.
         4 binary tag(s) compared.
   2097152 byte(s) compared.
        32 difference(s) found.
}}}

--------------------

== Dicom Study Compare ==

TBD

= Next Steps =

*Done*

   * Resolve binary/text differences between DICOM and MINT
   * Revisit Part 10 header differences between DICOM and MINT
   * Parse sequencing data elements (SQ) in MintStudy
   * Compare sequencing data elements (SQ) between MINT studies
   * Parse sequencing data elements (SQ) in DICOM 
   * Detect endianness, explicit VRs
   * Compare sequencing data elements (SQ) between DICOM and MINT
   * Use data dictionary to find VRs
   * Store binary in temp files for large DICOMs
   * Provide support for inline binary
   * Provide support for bulk binary
   * Read DCM4CHE data dictionary from URL

*To Do*

   * Consider cases for multiple VRs
   * SAX parsing for large metadata files
   * Add flag for changing the floating point precision
   * Comparisons before and after updates
   * Support multi-frame DICOM