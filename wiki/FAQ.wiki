#summary Frequently Asked Questions
#labels Featured

  * Q: Why doesn't MINT use an existing DICOM to XML mapping like Supplement 118?
  * A: Performance is a key requirement for MINT and we found the verbose schema used by Supplement 118 to negatively impact performance.  The current MINT XML schema is more concise which makes it faster to parse.

  * Q: What exactly is metadata?
  * A: In MINT, metadata is all data about a given type except for data that has been extracted into binary items.  For the DICOM type, this typically means that the metadata contains all attributes for all SOP Instances in a study except for the images which are extracted into binary items

  * Q: What does normalization mean?
  * A: It means that data items are not duplicated.  For example - a study belongs to a single patient so there should only be a single patient name in the metadata.  

  * Q: Why is the metadata normalized?
  * A: We normalized the metadata in MINT to match the DICOM logical model.  

  * Q: Why did you normalize the metadata instead of leaving it denormalized as it is found in DICOM P10 Instances?
  * A: One of the key goals for MINT is to centralized QC logic.  Ensuring that data is normalized is one way we achieve this.  As it is in DICOM today, QC logic is distributed amongst all systems in the enterprise and each of them handle data validation in different ways.

  * Q: The DICOM logical model does not include normalization of attributes below the series level - why did you do this in MINT?
  * A: There is a tremendous ammount of duplication of attributes below the series level and we wanted to make MINT as fast as possible.  

  * Q: Doesn't multiframe solve the same problem?
  * A: Yes it does, but much single frame data exists and new SOP classes are added which can benefit from this mechanism.

  * Q: What kind of data validation problems exist with DICOM denormalization
  * A: Common problems include:
    # SOP Instances in the same study have different patient names.  The worst case scenario is that the SOP Instances are for two different patients.  A common case is where SOP Instances for the same patient in have different patient names.  When a viewer detects this situatio - how does it know which case it is?
    # SOP Instances in the same study have different study dates.  Which one do you display in the worklist?

  * Q: Where does the validation and rule logic live in a MINT based architecture?
  * A: The MINT server performs basic validation on the structure of the metadata, it does not validate the actual data itself.  Data validation is expected to be performed by MINT clients (e.g. a PACS or VNA that has DICOM CSTORE SCP, storage commit and HL7 reconciliation capabilities)

  * Q: Why does MINT use REST instead of WS?
  * A: One of the primary motivations for MINT was to provide the simplest abstraction possible on the underlying storage infrastructure.  Since storage subsystems are essentially CRUD based instead of process/workflow based, REST is a much better fit than WS.  While MINT is currently implemented with REST, it is certainly possible to create WS mappings.

  * Q: How does REST map to CRUD?
  * A: REST utilizes the standard HTTP verbs
    * GET = READ
    * POST = CREATE
    * PUT = UPDATE
    * DELETE = DELETE

  * Q: How does MINT compare to WADO?
  * A: 
  Similarities:
     * Both use HTTP

  Differences:
     * WADO can return SOP Instances encoded as DICOM P10 instances, MINT cannot (although the reference implementation does include a tool to regenerate P10 from MINT)
     * WADO supports the generation of JPEG/PNG images, MINT does not
     * MINT includes a query mechanism, WADO does not (you have to use CFIND or other)
     * MINT includes a changelog mechanism that enables other systems to stay in sync with changes in the system, WADO does not
     * MINT normalizes the metadata eliminating ambiguity inherit in DICOM P10 encoding, WADO does not 
     * MINT includes an extendability mechanism that supports storage of private data as well as private SOP classes.  WADO only supports private SOP classes
     * MINT includes streaming and batch access mechanisms.  WADO's granularity is at the SOP Instance level
     * MINT allows access to individual frames in a multi-frame instance, WADO does not
     * MINT allows access to individual binary items in a SOP Instance, WADO does not
     * MINT allows access to the entire metadata for a study without having to pull down the pixel data, WADO does not

  * Q: When will MINT add support for image rendering like WADO has?
  * A: There are no plans to add WADO like image rendering to MINT.  WADO already provides this capability and it is straightforward to have WADO integrate with MINT. 

  * Q: What are MINT extensions?
  * A: Extensions are a mechanism to enable applications to store proprietary or non standard data along with a study

  * Q: Why don't you leverage private SOP classes for storing proprietary or non standard data?
  * A: MINT fully supports private SOP classes and its use is not discouraged.  MINT does provide an alternative to private SOP classes that is simpler and more flexible than the DICOM private SOP class mechanism - it is up to applications to determine which makes the most sense for their use cases

  * Q: Doesn't DICOM P10 + a storage protocol like CIFS do the same thing as MINT?
  * A: It does provide similar capabilities but MINTs normalization, XML encoding and HTTP based protocol provide significant benefits.

  * Q: Are MINT service implementations required to store data in DICOM P10 format?
  * A: No, MINT is a network protocol and does not specify implementation level details such as how the data is stored.

  * Q: Why not specify implementation level details?
  * A: Technology continues to advance and we don't want to constrain innovation by specifying the implementation.  We also want to make it as easy as possible for existing architectures to add support for MINT

  * Q: Why are studies identified using a UUID instead of the DICOM Study Instance UID?
  * A: DICOM Study Instance UIDs are known to not be unique due to various issues in the real world.  Using a MINT server generated UUID is safer and simpler than having to deal with scenarios where identifiers are provided by external systems.  A UUID also allows MINT to be adopted by existing system architectures that ensure uniqueness of study uids as well as those that do not require them to be unique (both exist in the real world)

  * Q: Can MIME types be used to get metadata encoded in other formats besides XML?
  * A: Yes, in fact the reference implementation provides an encoding based on google protocol buffers that provides performs much better than XML and is similar to native DICOM encoding.
  
  * Q: Why don't you include compression as a type of encoding?
  * A: Compression is a layer above the underlying encoding and is already handled as part of the HTTP mechanism (e.g. gzip)

  * Q: Why doesn't MINT specify anything related to authentication or authorization?
  * A: MINT is based on HTTP which enables implementation teams to apply authC and authZ systems, technologies and approaches they are using in existing systems in the same manner for MINT.

  * Q: To synchronize with a MINT server, my system has to poll the changelog.  Isn't polling inefficient and not scalable?
  * A: Technically polling is less efficient but far simpler.  The web is built on polling and it has scaled quite well - MINT is based on the same principles so it can leverage the knowledge, technologies and mechanisms that are already well understood.

  * Q: Why doesn't MINT have any support for transcoding (converting from one transfer syntax to another)?
  * A: We wanted to keep MINT as simple as possible and transcoding adds a level of complexity that we wanted to avoid.  One could envision a gateway that implements the MINT interface but also provides transcoding functionality.  The different transfer syntax encodings could be dispatched via a URI mechanism (e.g. http://server/jpeg200/studies/... vs http://server/jpegls/studies/...)

  * Q: Why does MINT expose individual image frames stored in DICOM Multiframe images?
  * A: There are several ways of encoding individual frames in DICOM multiframe depending upon whether or not they are compressed or fragmented.  With MINT, we wanted to both unify and simplify multiframe handling to make it easier for viewers to fully support multiframe encoding.  We also needed to break these down into individual frames to better support on demand loading scenarios.

  * Q: How does MINT handle updates to patient demographics?
  * A: MINT's normalization of metadata as well as support for updating individual attributes makes this very easy.  For example, updating the patient name is as simple as sending an update with the patient name tag with the new value.  Since it is normalized, this single update will apply to all SOP Instances in the study.

  * Q: What attribute can I search for studies with?
  * A: Studies can be searched by using the following HTTP query string parameters
    * studyInstanceUID 
    * accessionNumber
    * issuerOfAccessionNumber
    * patientId
    * issuerOfPatientId
    * studyDateTimeFrom
    * studyDateTimeTo
    * studyVersion
    * limit - maximum number of results to return (needed for paging)
    * offset - index of first result to return in the result set (needed for paging) 

  * Q: Why can't I search on XXX attribute?
  * A: The MINT search mechanism is intended to be used to find a single study, a list of patient studies and data extraction (for ETL) use cases.  MINT is not intended to directly support end user workflow which typically requires more complex queries including filtering on values with low selectability.  One could envision building workflow solutions based on MINT integration.  MINT provides a highly efficient mechanism to access summary information about a study that includes patient/study and series level information.  It is expected that this summary information will meet the needs for many workflow scenarios.

  * Q: What is the format of date/times when searching using studyDateTimeFrom and studyDateTimeTo?
  * A: We use ISO 8601: http://en.wikipedia.org/wiki/ISO_8601

  * Q: Why did you decide to use ISO 8601 instead of DICOM DT format?
  * A: We wanted to use a format that was more standard and fully supported time zone scenarios.  We felt the benefits of this approach outweigh the drawbacks of having two different date time formats.

  * Q: Can I reference a BID in another type as part of my extension schema
  * A: No, the BID is an implementation detail and we don't want to constrain MINT implementations to support them forever (although many will).  

  * Q: OK then how should I refer to the binary data from an extension then?
  * A: Use another key such as SOP Instance UID and tag and lookup the BID in the DICOM metadata.
 
  * Q: Must all binary data be extracted into binary item ids?  
  * A: No, binary data can be encoded in base64 inline in the metadata

  * Q: Why add the complexity of two ways to handle binary data?
  * A: Because there are a large number of DICOM attributes which have very small binary data values (1-3 bytes)
  
  * Q: Why not compress the binary data using gzip before base 64 encoding?
  * A: This will happen automatically by HTTP when a compression MIME type is negotiated
 
  * Q: What is the algorithm MINT uses to determine whether or not to inline binary data or extract it into binary item ids
  * A: No algorithm is specified, this is really up to the implementation of the MINT server.  Clients should be prepared to handle both encodings (inline vs extraction) for any attribute including those in extensions.