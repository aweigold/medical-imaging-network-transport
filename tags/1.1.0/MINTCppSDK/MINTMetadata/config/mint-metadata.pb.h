// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config/mint-metadata.proto

#ifndef PROTOBUF_config_2fmint_2dmetadata_2eproto__INCLUDED
#define PROTOBUF_config_2fmint_2dmetadata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace mint {
namespace metadata {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_config_2fmint_2dmetadata_2eproto();
void protobuf_AssignDesc_config_2fmint_2dmetadata_2eproto();
void protobuf_ShutdownFile_config_2fmint_2dmetadata_2eproto();

class StudyData;
class SeriesData;
class InstanceData;
class AttributeData;
class ItemData;

// ===================================================================

class StudyData : public ::google::protobuf::Message {
 public:
  StudyData();
  virtual ~StudyData();
  
  StudyData(const StudyData& from);
  
  inline StudyData& operator=(const StudyData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StudyData& default_instance();
  
  void Swap(StudyData* other);
  
  // implements Message ----------------------------------------------
  
  StudyData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StudyData& from);
  void MergeFrom(const StudyData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string study_instance_uid = 1;
  inline bool has_study_instance_uid() const;
  inline void clear_study_instance_uid();
  static const int kStudyInstanceUidFieldNumber = 1;
  inline const ::std::string& study_instance_uid() const;
  inline void set_study_instance_uid(const ::std::string& value);
  inline void set_study_instance_uid(const char* value);
  inline void set_study_instance_uid(const char* value, size_t size);
  inline ::std::string* mutable_study_instance_uid();
  
  // optional string type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  
  // optional string version = 5;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 5;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  
  // optional uint32 instance_count = 6;
  inline bool has_instance_count() const;
  inline void clear_instance_count();
  static const int kInstanceCountFieldNumber = 6;
  inline ::google::protobuf::uint32 instance_count() const;
  inline void set_instance_count(::google::protobuf::uint32 value);
  
  // repeated .mint.metadata.AttributeData attributes = 2;
  inline int attributes_size() const;
  inline void clear_attributes();
  static const int kAttributesFieldNumber = 2;
  inline const ::mint::metadata::AttributeData& attributes(int index) const;
  inline ::mint::metadata::AttributeData* mutable_attributes(int index);
  inline ::mint::metadata::AttributeData* add_attributes();
  inline const ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData >&
      attributes() const;
  inline ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData >*
      mutable_attributes();
  
  // repeated .mint.metadata.SeriesData series = 3;
  inline int series_size() const;
  inline void clear_series();
  static const int kSeriesFieldNumber = 3;
  inline const ::mint::metadata::SeriesData& series(int index) const;
  inline ::mint::metadata::SeriesData* mutable_series(int index);
  inline ::mint::metadata::SeriesData* add_series();
  inline const ::google::protobuf::RepeatedPtrField< ::mint::metadata::SeriesData >&
      series() const;
  inline ::google::protobuf::RepeatedPtrField< ::mint::metadata::SeriesData >*
      mutable_series();
  
  // @@protoc_insertion_point(class_scope:mint.metadata.StudyData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* study_instance_uid_;
  static const ::std::string _default_study_instance_uid_;
  ::std::string* type_;
  static const ::std::string _default_type_;
  ::std::string* version_;
  static const ::std::string _default_version_;
  ::google::protobuf::uint32 instance_count_;
  ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData > attributes_;
  ::google::protobuf::RepeatedPtrField< ::mint::metadata::SeriesData > series_;
  friend void  protobuf_AddDesc_config_2fmint_2dmetadata_2eproto();
  friend void protobuf_AssignDesc_config_2fmint_2dmetadata_2eproto();
  friend void protobuf_ShutdownFile_config_2fmint_2dmetadata_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StudyData* default_instance_;
};
// -------------------------------------------------------------------

class SeriesData : public ::google::protobuf::Message {
 public:
  SeriesData();
  virtual ~SeriesData();
  
  SeriesData(const SeriesData& from);
  
  inline SeriesData& operator=(const SeriesData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeriesData& default_instance();
  
  void Swap(SeriesData* other);
  
  // implements Message ----------------------------------------------
  
  SeriesData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeriesData& from);
  void MergeFrom(const SeriesData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string series_instance_uid = 1;
  inline bool has_series_instance_uid() const;
  inline void clear_series_instance_uid();
  static const int kSeriesInstanceUidFieldNumber = 1;
  inline const ::std::string& series_instance_uid() const;
  inline void set_series_instance_uid(const ::std::string& value);
  inline void set_series_instance_uid(const char* value);
  inline void set_series_instance_uid(const char* value, size_t size);
  inline ::std::string* mutable_series_instance_uid();
  
  // optional string exclude = 2;
  inline bool has_exclude() const;
  inline void clear_exclude();
  static const int kExcludeFieldNumber = 2;
  inline const ::std::string& exclude() const;
  inline void set_exclude(const ::std::string& value);
  inline void set_exclude(const char* value);
  inline void set_exclude(const char* value, size_t size);
  inline ::std::string* mutable_exclude();
  
  // optional uint32 instance_count = 6;
  inline bool has_instance_count() const;
  inline void clear_instance_count();
  static const int kInstanceCountFieldNumber = 6;
  inline ::google::protobuf::uint32 instance_count() const;
  inline void set_instance_count(::google::protobuf::uint32 value);
  
  // repeated .mint.metadata.AttributeData attributes = 3;
  inline int attributes_size() const;
  inline void clear_attributes();
  static const int kAttributesFieldNumber = 3;
  inline const ::mint::metadata::AttributeData& attributes(int index) const;
  inline ::mint::metadata::AttributeData* mutable_attributes(int index);
  inline ::mint::metadata::AttributeData* add_attributes();
  inline const ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData >&
      attributes() const;
  inline ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData >*
      mutable_attributes();
  
  // repeated .mint.metadata.AttributeData normalized_instance_attributes = 4;
  inline int normalized_instance_attributes_size() const;
  inline void clear_normalized_instance_attributes();
  static const int kNormalizedInstanceAttributesFieldNumber = 4;
  inline const ::mint::metadata::AttributeData& normalized_instance_attributes(int index) const;
  inline ::mint::metadata::AttributeData* mutable_normalized_instance_attributes(int index);
  inline ::mint::metadata::AttributeData* add_normalized_instance_attributes();
  inline const ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData >&
      normalized_instance_attributes() const;
  inline ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData >*
      mutable_normalized_instance_attributes();
  
  // repeated .mint.metadata.InstanceData instances = 5;
  inline int instances_size() const;
  inline void clear_instances();
  static const int kInstancesFieldNumber = 5;
  inline const ::mint::metadata::InstanceData& instances(int index) const;
  inline ::mint::metadata::InstanceData* mutable_instances(int index);
  inline ::mint::metadata::InstanceData* add_instances();
  inline const ::google::protobuf::RepeatedPtrField< ::mint::metadata::InstanceData >&
      instances() const;
  inline ::google::protobuf::RepeatedPtrField< ::mint::metadata::InstanceData >*
      mutable_instances();
  
  // @@protoc_insertion_point(class_scope:mint.metadata.SeriesData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* series_instance_uid_;
  static const ::std::string _default_series_instance_uid_;
  ::std::string* exclude_;
  static const ::std::string _default_exclude_;
  ::google::protobuf::uint32 instance_count_;
  ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData > attributes_;
  ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData > normalized_instance_attributes_;
  ::google::protobuf::RepeatedPtrField< ::mint::metadata::InstanceData > instances_;
  friend void  protobuf_AddDesc_config_2fmint_2dmetadata_2eproto();
  friend void protobuf_AssignDesc_config_2fmint_2dmetadata_2eproto();
  friend void protobuf_ShutdownFile_config_2fmint_2dmetadata_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SeriesData* default_instance_;
};
// -------------------------------------------------------------------

class InstanceData : public ::google::protobuf::Message {
 public:
  InstanceData();
  virtual ~InstanceData();
  
  InstanceData(const InstanceData& from);
  
  inline InstanceData& operator=(const InstanceData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InstanceData& default_instance();
  
  void Swap(InstanceData* other);
  
  // implements Message ----------------------------------------------
  
  InstanceData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstanceData& from);
  void MergeFrom(const InstanceData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string sop_instance_uid = 1;
  inline bool has_sop_instance_uid() const;
  inline void clear_sop_instance_uid();
  static const int kSopInstanceUidFieldNumber = 1;
  inline const ::std::string& sop_instance_uid() const;
  inline void set_sop_instance_uid(const ::std::string& value);
  inline void set_sop_instance_uid(const char* value);
  inline void set_sop_instance_uid(const char* value, size_t size);
  inline ::std::string* mutable_sop_instance_uid();
  
  // optional string exclude = 2;
  inline bool has_exclude() const;
  inline void clear_exclude();
  static const int kExcludeFieldNumber = 2;
  inline const ::std::string& exclude() const;
  inline void set_exclude(const ::std::string& value);
  inline void set_exclude(const char* value);
  inline void set_exclude(const char* value, size_t size);
  inline ::std::string* mutable_exclude();
  
  // optional string transfer_syntax_uid = 3;
  inline bool has_transfer_syntax_uid() const;
  inline void clear_transfer_syntax_uid();
  static const int kTransferSyntaxUidFieldNumber = 3;
  inline const ::std::string& transfer_syntax_uid() const;
  inline void set_transfer_syntax_uid(const ::std::string& value);
  inline void set_transfer_syntax_uid(const char* value);
  inline void set_transfer_syntax_uid(const char* value, size_t size);
  inline ::std::string* mutable_transfer_syntax_uid();
  
  // repeated .mint.metadata.AttributeData attributes = 4;
  inline int attributes_size() const;
  inline void clear_attributes();
  static const int kAttributesFieldNumber = 4;
  inline const ::mint::metadata::AttributeData& attributes(int index) const;
  inline ::mint::metadata::AttributeData* mutable_attributes(int index);
  inline ::mint::metadata::AttributeData* add_attributes();
  inline const ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData >&
      attributes() const;
  inline ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData >*
      mutable_attributes();
  
  // @@protoc_insertion_point(class_scope:mint.metadata.InstanceData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* sop_instance_uid_;
  static const ::std::string _default_sop_instance_uid_;
  ::std::string* exclude_;
  static const ::std::string _default_exclude_;
  ::std::string* transfer_syntax_uid_;
  static const ::std::string _default_transfer_syntax_uid_;
  ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData > attributes_;
  friend void  protobuf_AddDesc_config_2fmint_2dmetadata_2eproto();
  friend void protobuf_AssignDesc_config_2fmint_2dmetadata_2eproto();
  friend void protobuf_ShutdownFile_config_2fmint_2dmetadata_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static InstanceData* default_instance_;
};
// -------------------------------------------------------------------

class AttributeData : public ::google::protobuf::Message {
 public:
  AttributeData();
  virtual ~AttributeData();
  
  AttributeData(const AttributeData& from);
  
  inline AttributeData& operator=(const AttributeData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttributeData& default_instance();
  
  void Swap(AttributeData* other);
  
  // implements Message ----------------------------------------------
  
  AttributeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttributeData& from);
  void MergeFrom(const AttributeData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 tag = 1;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 1;
  inline ::google::protobuf::uint32 tag() const;
  inline void set_tag(::google::protobuf::uint32 value);
  
  // optional string exclude = 2;
  inline bool has_exclude() const;
  inline void clear_exclude();
  static const int kExcludeFieldNumber = 2;
  inline const ::std::string& exclude() const;
  inline void set_exclude(const ::std::string& value);
  inline void set_exclude(const char* value);
  inline void set_exclude(const char* value, size_t size);
  inline ::std::string* mutable_exclude();
  
  // optional string vr = 3;
  inline bool has_vr() const;
  inline void clear_vr();
  static const int kVrFieldNumber = 3;
  inline const ::std::string& vr() const;
  inline void set_vr(const ::std::string& value);
  inline void set_vr(const char* value);
  inline void set_vr(const char* value, size_t size);
  inline ::std::string* mutable_vr();
  
  // optional string string_value = 4;
  inline bool has_string_value() const;
  inline void clear_string_value();
  static const int kStringValueFieldNumber = 4;
  inline const ::std::string& string_value() const;
  inline void set_string_value(const ::std::string& value);
  inline void set_string_value(const char* value);
  inline void set_string_value(const char* value, size_t size);
  inline ::std::string* mutable_string_value();
  
  // optional uint32 binary_item_id = 5;
  inline bool has_binary_item_id() const;
  inline void clear_binary_item_id();
  static const int kBinaryItemIdFieldNumber = 5;
  inline ::google::protobuf::uint32 binary_item_id() const;
  inline void set_binary_item_id(::google::protobuf::uint32 value);
  
  // optional uint32 binary_item_size = 9;
  inline bool has_binary_item_size() const;
  inline void clear_binary_item_size();
  static const int kBinaryItemSizeFieldNumber = 9;
  inline ::google::protobuf::uint32 binary_item_size() const;
  inline void set_binary_item_size(::google::protobuf::uint32 value);
  
  // optional uint32 frame_count = 8;
  inline bool has_frame_count() const;
  inline void clear_frame_count();
  static const int kFrameCountFieldNumber = 8;
  inline ::google::protobuf::uint32 frame_count() const;
  inline void set_frame_count(::google::protobuf::uint32 value);
  
  // optional bytes bytes = 7;
  inline bool has_bytes() const;
  inline void clear_bytes();
  static const int kBytesFieldNumber = 7;
  inline const ::std::string& bytes() const;
  inline void set_bytes(const ::std::string& value);
  inline void set_bytes(const char* value);
  inline void set_bytes(const void* value, size_t size);
  inline ::std::string* mutable_bytes();
  
  // repeated .mint.metadata.ItemData items = 6;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 6;
  inline const ::mint::metadata::ItemData& items(int index) const;
  inline ::mint::metadata::ItemData* mutable_items(int index);
  inline ::mint::metadata::ItemData* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::mint::metadata::ItemData >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::mint::metadata::ItemData >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:mint.metadata.AttributeData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 tag_;
  ::std::string* exclude_;
  static const ::std::string _default_exclude_;
  ::std::string* vr_;
  static const ::std::string _default_vr_;
  ::std::string* string_value_;
  static const ::std::string _default_string_value_;
  ::google::protobuf::uint32 binary_item_id_;
  ::google::protobuf::uint32 binary_item_size_;
  ::google::protobuf::uint32 frame_count_;
  ::std::string* bytes_;
  static const ::std::string _default_bytes_;
  ::google::protobuf::RepeatedPtrField< ::mint::metadata::ItemData > items_;
  friend void  protobuf_AddDesc_config_2fmint_2dmetadata_2eproto();
  friend void protobuf_AssignDesc_config_2fmint_2dmetadata_2eproto();
  friend void protobuf_ShutdownFile_config_2fmint_2dmetadata_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AttributeData* default_instance_;
};
// -------------------------------------------------------------------

class ItemData : public ::google::protobuf::Message {
 public:
  ItemData();
  virtual ~ItemData();
  
  ItemData(const ItemData& from);
  
  inline ItemData& operator=(const ItemData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemData& default_instance();
  
  void Swap(ItemData* other);
  
  // implements Message ----------------------------------------------
  
  ItemData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemData& from);
  void MergeFrom(const ItemData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .mint.metadata.AttributeData attributes = 1;
  inline int attributes_size() const;
  inline void clear_attributes();
  static const int kAttributesFieldNumber = 1;
  inline const ::mint::metadata::AttributeData& attributes(int index) const;
  inline ::mint::metadata::AttributeData* mutable_attributes(int index);
  inline ::mint::metadata::AttributeData* add_attributes();
  inline const ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData >&
      attributes() const;
  inline ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData >*
      mutable_attributes();
  
  // @@protoc_insertion_point(class_scope:mint.metadata.ItemData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData > attributes_;
  friend void  protobuf_AddDesc_config_2fmint_2dmetadata_2eproto();
  friend void protobuf_AssignDesc_config_2fmint_2dmetadata_2eproto();
  friend void protobuf_ShutdownFile_config_2fmint_2dmetadata_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ItemData* default_instance_;
};
// ===================================================================


// ===================================================================

// StudyData

// optional string study_instance_uid = 1;
inline bool StudyData::has_study_instance_uid() const {
  return _has_bit(0);
}
inline void StudyData::clear_study_instance_uid() {
  if (study_instance_uid_ != &_default_study_instance_uid_) {
    study_instance_uid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& StudyData::study_instance_uid() const {
  return *study_instance_uid_;
}
inline void StudyData::set_study_instance_uid(const ::std::string& value) {
  _set_bit(0);
  if (study_instance_uid_ == &_default_study_instance_uid_) {
    study_instance_uid_ = new ::std::string;
  }
  study_instance_uid_->assign(value);
}
inline void StudyData::set_study_instance_uid(const char* value) {
  _set_bit(0);
  if (study_instance_uid_ == &_default_study_instance_uid_) {
    study_instance_uid_ = new ::std::string;
  }
  study_instance_uid_->assign(value);
}
inline void StudyData::set_study_instance_uid(const char* value, size_t size) {
  _set_bit(0);
  if (study_instance_uid_ == &_default_study_instance_uid_) {
    study_instance_uid_ = new ::std::string;
  }
  study_instance_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StudyData::mutable_study_instance_uid() {
  _set_bit(0);
  if (study_instance_uid_ == &_default_study_instance_uid_) {
    study_instance_uid_ = new ::std::string;
  }
  return study_instance_uid_;
}

// optional string type = 4;
inline bool StudyData::has_type() const {
  return _has_bit(1);
}
inline void StudyData::clear_type() {
  if (type_ != &_default_type_) {
    type_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& StudyData::type() const {
  return *type_;
}
inline void StudyData::set_type(const ::std::string& value) {
  _set_bit(1);
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void StudyData::set_type(const char* value) {
  _set_bit(1);
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void StudyData::set_type(const char* value, size_t size) {
  _set_bit(1);
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StudyData::mutable_type() {
  _set_bit(1);
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  return type_;
}

// optional string version = 5;
inline bool StudyData::has_version() const {
  return _has_bit(2);
}
inline void StudyData::clear_version() {
  if (version_ != &_default_version_) {
    version_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& StudyData::version() const {
  return *version_;
}
inline void StudyData::set_version(const ::std::string& value) {
  _set_bit(2);
  if (version_ == &_default_version_) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void StudyData::set_version(const char* value) {
  _set_bit(2);
  if (version_ == &_default_version_) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void StudyData::set_version(const char* value, size_t size) {
  _set_bit(2);
  if (version_ == &_default_version_) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StudyData::mutable_version() {
  _set_bit(2);
  if (version_ == &_default_version_) {
    version_ = new ::std::string;
  }
  return version_;
}

// optional uint32 instance_count = 6;
inline bool StudyData::has_instance_count() const {
  return _has_bit(3);
}
inline void StudyData::clear_instance_count() {
  instance_count_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 StudyData::instance_count() const {
  return instance_count_;
}
inline void StudyData::set_instance_count(::google::protobuf::uint32 value) {
  _set_bit(3);
  instance_count_ = value;
}

// repeated .mint.metadata.AttributeData attributes = 2;
inline int StudyData::attributes_size() const {
  return attributes_.size();
}
inline void StudyData::clear_attributes() {
  attributes_.Clear();
}
inline const ::mint::metadata::AttributeData& StudyData::attributes(int index) const {
  return attributes_.Get(index);
}
inline ::mint::metadata::AttributeData* StudyData::mutable_attributes(int index) {
  return attributes_.Mutable(index);
}
inline ::mint::metadata::AttributeData* StudyData::add_attributes() {
  return attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData >&
StudyData::attributes() const {
  return attributes_;
}
inline ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData >*
StudyData::mutable_attributes() {
  return &attributes_;
}

// repeated .mint.metadata.SeriesData series = 3;
inline int StudyData::series_size() const {
  return series_.size();
}
inline void StudyData::clear_series() {
  series_.Clear();
}
inline const ::mint::metadata::SeriesData& StudyData::series(int index) const {
  return series_.Get(index);
}
inline ::mint::metadata::SeriesData* StudyData::mutable_series(int index) {
  return series_.Mutable(index);
}
inline ::mint::metadata::SeriesData* StudyData::add_series() {
  return series_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mint::metadata::SeriesData >&
StudyData::series() const {
  return series_;
}
inline ::google::protobuf::RepeatedPtrField< ::mint::metadata::SeriesData >*
StudyData::mutable_series() {
  return &series_;
}

// -------------------------------------------------------------------

// SeriesData

// optional string series_instance_uid = 1;
inline bool SeriesData::has_series_instance_uid() const {
  return _has_bit(0);
}
inline void SeriesData::clear_series_instance_uid() {
  if (series_instance_uid_ != &_default_series_instance_uid_) {
    series_instance_uid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SeriesData::series_instance_uid() const {
  return *series_instance_uid_;
}
inline void SeriesData::set_series_instance_uid(const ::std::string& value) {
  _set_bit(0);
  if (series_instance_uid_ == &_default_series_instance_uid_) {
    series_instance_uid_ = new ::std::string;
  }
  series_instance_uid_->assign(value);
}
inline void SeriesData::set_series_instance_uid(const char* value) {
  _set_bit(0);
  if (series_instance_uid_ == &_default_series_instance_uid_) {
    series_instance_uid_ = new ::std::string;
  }
  series_instance_uid_->assign(value);
}
inline void SeriesData::set_series_instance_uid(const char* value, size_t size) {
  _set_bit(0);
  if (series_instance_uid_ == &_default_series_instance_uid_) {
    series_instance_uid_ = new ::std::string;
  }
  series_instance_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SeriesData::mutable_series_instance_uid() {
  _set_bit(0);
  if (series_instance_uid_ == &_default_series_instance_uid_) {
    series_instance_uid_ = new ::std::string;
  }
  return series_instance_uid_;
}

// optional string exclude = 2;
inline bool SeriesData::has_exclude() const {
  return _has_bit(1);
}
inline void SeriesData::clear_exclude() {
  if (exclude_ != &_default_exclude_) {
    exclude_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& SeriesData::exclude() const {
  return *exclude_;
}
inline void SeriesData::set_exclude(const ::std::string& value) {
  _set_bit(1);
  if (exclude_ == &_default_exclude_) {
    exclude_ = new ::std::string;
  }
  exclude_->assign(value);
}
inline void SeriesData::set_exclude(const char* value) {
  _set_bit(1);
  if (exclude_ == &_default_exclude_) {
    exclude_ = new ::std::string;
  }
  exclude_->assign(value);
}
inline void SeriesData::set_exclude(const char* value, size_t size) {
  _set_bit(1);
  if (exclude_ == &_default_exclude_) {
    exclude_ = new ::std::string;
  }
  exclude_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SeriesData::mutable_exclude() {
  _set_bit(1);
  if (exclude_ == &_default_exclude_) {
    exclude_ = new ::std::string;
  }
  return exclude_;
}

// optional uint32 instance_count = 6;
inline bool SeriesData::has_instance_count() const {
  return _has_bit(2);
}
inline void SeriesData::clear_instance_count() {
  instance_count_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 SeriesData::instance_count() const {
  return instance_count_;
}
inline void SeriesData::set_instance_count(::google::protobuf::uint32 value) {
  _set_bit(2);
  instance_count_ = value;
}

// repeated .mint.metadata.AttributeData attributes = 3;
inline int SeriesData::attributes_size() const {
  return attributes_.size();
}
inline void SeriesData::clear_attributes() {
  attributes_.Clear();
}
inline const ::mint::metadata::AttributeData& SeriesData::attributes(int index) const {
  return attributes_.Get(index);
}
inline ::mint::metadata::AttributeData* SeriesData::mutable_attributes(int index) {
  return attributes_.Mutable(index);
}
inline ::mint::metadata::AttributeData* SeriesData::add_attributes() {
  return attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData >&
SeriesData::attributes() const {
  return attributes_;
}
inline ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData >*
SeriesData::mutable_attributes() {
  return &attributes_;
}

// repeated .mint.metadata.AttributeData normalized_instance_attributes = 4;
inline int SeriesData::normalized_instance_attributes_size() const {
  return normalized_instance_attributes_.size();
}
inline void SeriesData::clear_normalized_instance_attributes() {
  normalized_instance_attributes_.Clear();
}
inline const ::mint::metadata::AttributeData& SeriesData::normalized_instance_attributes(int index) const {
  return normalized_instance_attributes_.Get(index);
}
inline ::mint::metadata::AttributeData* SeriesData::mutable_normalized_instance_attributes(int index) {
  return normalized_instance_attributes_.Mutable(index);
}
inline ::mint::metadata::AttributeData* SeriesData::add_normalized_instance_attributes() {
  return normalized_instance_attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData >&
SeriesData::normalized_instance_attributes() const {
  return normalized_instance_attributes_;
}
inline ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData >*
SeriesData::mutable_normalized_instance_attributes() {
  return &normalized_instance_attributes_;
}

// repeated .mint.metadata.InstanceData instances = 5;
inline int SeriesData::instances_size() const {
  return instances_.size();
}
inline void SeriesData::clear_instances() {
  instances_.Clear();
}
inline const ::mint::metadata::InstanceData& SeriesData::instances(int index) const {
  return instances_.Get(index);
}
inline ::mint::metadata::InstanceData* SeriesData::mutable_instances(int index) {
  return instances_.Mutable(index);
}
inline ::mint::metadata::InstanceData* SeriesData::add_instances() {
  return instances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mint::metadata::InstanceData >&
SeriesData::instances() const {
  return instances_;
}
inline ::google::protobuf::RepeatedPtrField< ::mint::metadata::InstanceData >*
SeriesData::mutable_instances() {
  return &instances_;
}

// -------------------------------------------------------------------

// InstanceData

// optional string sop_instance_uid = 1;
inline bool InstanceData::has_sop_instance_uid() const {
  return _has_bit(0);
}
inline void InstanceData::clear_sop_instance_uid() {
  if (sop_instance_uid_ != &_default_sop_instance_uid_) {
    sop_instance_uid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& InstanceData::sop_instance_uid() const {
  return *sop_instance_uid_;
}
inline void InstanceData::set_sop_instance_uid(const ::std::string& value) {
  _set_bit(0);
  if (sop_instance_uid_ == &_default_sop_instance_uid_) {
    sop_instance_uid_ = new ::std::string;
  }
  sop_instance_uid_->assign(value);
}
inline void InstanceData::set_sop_instance_uid(const char* value) {
  _set_bit(0);
  if (sop_instance_uid_ == &_default_sop_instance_uid_) {
    sop_instance_uid_ = new ::std::string;
  }
  sop_instance_uid_->assign(value);
}
inline void InstanceData::set_sop_instance_uid(const char* value, size_t size) {
  _set_bit(0);
  if (sop_instance_uid_ == &_default_sop_instance_uid_) {
    sop_instance_uid_ = new ::std::string;
  }
  sop_instance_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InstanceData::mutable_sop_instance_uid() {
  _set_bit(0);
  if (sop_instance_uid_ == &_default_sop_instance_uid_) {
    sop_instance_uid_ = new ::std::string;
  }
  return sop_instance_uid_;
}

// optional string exclude = 2;
inline bool InstanceData::has_exclude() const {
  return _has_bit(1);
}
inline void InstanceData::clear_exclude() {
  if (exclude_ != &_default_exclude_) {
    exclude_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& InstanceData::exclude() const {
  return *exclude_;
}
inline void InstanceData::set_exclude(const ::std::string& value) {
  _set_bit(1);
  if (exclude_ == &_default_exclude_) {
    exclude_ = new ::std::string;
  }
  exclude_->assign(value);
}
inline void InstanceData::set_exclude(const char* value) {
  _set_bit(1);
  if (exclude_ == &_default_exclude_) {
    exclude_ = new ::std::string;
  }
  exclude_->assign(value);
}
inline void InstanceData::set_exclude(const char* value, size_t size) {
  _set_bit(1);
  if (exclude_ == &_default_exclude_) {
    exclude_ = new ::std::string;
  }
  exclude_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InstanceData::mutable_exclude() {
  _set_bit(1);
  if (exclude_ == &_default_exclude_) {
    exclude_ = new ::std::string;
  }
  return exclude_;
}

// optional string transfer_syntax_uid = 3;
inline bool InstanceData::has_transfer_syntax_uid() const {
  return _has_bit(2);
}
inline void InstanceData::clear_transfer_syntax_uid() {
  if (transfer_syntax_uid_ != &_default_transfer_syntax_uid_) {
    transfer_syntax_uid_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& InstanceData::transfer_syntax_uid() const {
  return *transfer_syntax_uid_;
}
inline void InstanceData::set_transfer_syntax_uid(const ::std::string& value) {
  _set_bit(2);
  if (transfer_syntax_uid_ == &_default_transfer_syntax_uid_) {
    transfer_syntax_uid_ = new ::std::string;
  }
  transfer_syntax_uid_->assign(value);
}
inline void InstanceData::set_transfer_syntax_uid(const char* value) {
  _set_bit(2);
  if (transfer_syntax_uid_ == &_default_transfer_syntax_uid_) {
    transfer_syntax_uid_ = new ::std::string;
  }
  transfer_syntax_uid_->assign(value);
}
inline void InstanceData::set_transfer_syntax_uid(const char* value, size_t size) {
  _set_bit(2);
  if (transfer_syntax_uid_ == &_default_transfer_syntax_uid_) {
    transfer_syntax_uid_ = new ::std::string;
  }
  transfer_syntax_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InstanceData::mutable_transfer_syntax_uid() {
  _set_bit(2);
  if (transfer_syntax_uid_ == &_default_transfer_syntax_uid_) {
    transfer_syntax_uid_ = new ::std::string;
  }
  return transfer_syntax_uid_;
}

// repeated .mint.metadata.AttributeData attributes = 4;
inline int InstanceData::attributes_size() const {
  return attributes_.size();
}
inline void InstanceData::clear_attributes() {
  attributes_.Clear();
}
inline const ::mint::metadata::AttributeData& InstanceData::attributes(int index) const {
  return attributes_.Get(index);
}
inline ::mint::metadata::AttributeData* InstanceData::mutable_attributes(int index) {
  return attributes_.Mutable(index);
}
inline ::mint::metadata::AttributeData* InstanceData::add_attributes() {
  return attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData >&
InstanceData::attributes() const {
  return attributes_;
}
inline ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData >*
InstanceData::mutable_attributes() {
  return &attributes_;
}

// -------------------------------------------------------------------

// AttributeData

// optional uint32 tag = 1;
inline bool AttributeData::has_tag() const {
  return _has_bit(0);
}
inline void AttributeData::clear_tag() {
  tag_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 AttributeData::tag() const {
  return tag_;
}
inline void AttributeData::set_tag(::google::protobuf::uint32 value) {
  _set_bit(0);
  tag_ = value;
}

// optional string exclude = 2;
inline bool AttributeData::has_exclude() const {
  return _has_bit(1);
}
inline void AttributeData::clear_exclude() {
  if (exclude_ != &_default_exclude_) {
    exclude_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& AttributeData::exclude() const {
  return *exclude_;
}
inline void AttributeData::set_exclude(const ::std::string& value) {
  _set_bit(1);
  if (exclude_ == &_default_exclude_) {
    exclude_ = new ::std::string;
  }
  exclude_->assign(value);
}
inline void AttributeData::set_exclude(const char* value) {
  _set_bit(1);
  if (exclude_ == &_default_exclude_) {
    exclude_ = new ::std::string;
  }
  exclude_->assign(value);
}
inline void AttributeData::set_exclude(const char* value, size_t size) {
  _set_bit(1);
  if (exclude_ == &_default_exclude_) {
    exclude_ = new ::std::string;
  }
  exclude_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AttributeData::mutable_exclude() {
  _set_bit(1);
  if (exclude_ == &_default_exclude_) {
    exclude_ = new ::std::string;
  }
  return exclude_;
}

// optional string vr = 3;
inline bool AttributeData::has_vr() const {
  return _has_bit(2);
}
inline void AttributeData::clear_vr() {
  if (vr_ != &_default_vr_) {
    vr_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& AttributeData::vr() const {
  return *vr_;
}
inline void AttributeData::set_vr(const ::std::string& value) {
  _set_bit(2);
  if (vr_ == &_default_vr_) {
    vr_ = new ::std::string;
  }
  vr_->assign(value);
}
inline void AttributeData::set_vr(const char* value) {
  _set_bit(2);
  if (vr_ == &_default_vr_) {
    vr_ = new ::std::string;
  }
  vr_->assign(value);
}
inline void AttributeData::set_vr(const char* value, size_t size) {
  _set_bit(2);
  if (vr_ == &_default_vr_) {
    vr_ = new ::std::string;
  }
  vr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AttributeData::mutable_vr() {
  _set_bit(2);
  if (vr_ == &_default_vr_) {
    vr_ = new ::std::string;
  }
  return vr_;
}

// optional string string_value = 4;
inline bool AttributeData::has_string_value() const {
  return _has_bit(3);
}
inline void AttributeData::clear_string_value() {
  if (string_value_ != &_default_string_value_) {
    string_value_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& AttributeData::string_value() const {
  return *string_value_;
}
inline void AttributeData::set_string_value(const ::std::string& value) {
  _set_bit(3);
  if (string_value_ == &_default_string_value_) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(value);
}
inline void AttributeData::set_string_value(const char* value) {
  _set_bit(3);
  if (string_value_ == &_default_string_value_) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(value);
}
inline void AttributeData::set_string_value(const char* value, size_t size) {
  _set_bit(3);
  if (string_value_ == &_default_string_value_) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AttributeData::mutable_string_value() {
  _set_bit(3);
  if (string_value_ == &_default_string_value_) {
    string_value_ = new ::std::string;
  }
  return string_value_;
}

// optional uint32 binary_item_id = 5;
inline bool AttributeData::has_binary_item_id() const {
  return _has_bit(4);
}
inline void AttributeData::clear_binary_item_id() {
  binary_item_id_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 AttributeData::binary_item_id() const {
  return binary_item_id_;
}
inline void AttributeData::set_binary_item_id(::google::protobuf::uint32 value) {
  _set_bit(4);
  binary_item_id_ = value;
}

// optional uint32 binary_item_size = 9;
inline bool AttributeData::has_binary_item_size() const {
  return _has_bit(5);
}
inline void AttributeData::clear_binary_item_size() {
  binary_item_size_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 AttributeData::binary_item_size() const {
  return binary_item_size_;
}
inline void AttributeData::set_binary_item_size(::google::protobuf::uint32 value) {
  _set_bit(5);
  binary_item_size_ = value;
}

// optional uint32 frame_count = 8;
inline bool AttributeData::has_frame_count() const {
  return _has_bit(6);
}
inline void AttributeData::clear_frame_count() {
  frame_count_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 AttributeData::frame_count() const {
  return frame_count_;
}
inline void AttributeData::set_frame_count(::google::protobuf::uint32 value) {
  _set_bit(6);
  frame_count_ = value;
}

// optional bytes bytes = 7;
inline bool AttributeData::has_bytes() const {
  return _has_bit(7);
}
inline void AttributeData::clear_bytes() {
  if (bytes_ != &_default_bytes_) {
    bytes_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& AttributeData::bytes() const {
  return *bytes_;
}
inline void AttributeData::set_bytes(const ::std::string& value) {
  _set_bit(7);
  if (bytes_ == &_default_bytes_) {
    bytes_ = new ::std::string;
  }
  bytes_->assign(value);
}
inline void AttributeData::set_bytes(const char* value) {
  _set_bit(7);
  if (bytes_ == &_default_bytes_) {
    bytes_ = new ::std::string;
  }
  bytes_->assign(value);
}
inline void AttributeData::set_bytes(const void* value, size_t size) {
  _set_bit(7);
  if (bytes_ == &_default_bytes_) {
    bytes_ = new ::std::string;
  }
  bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AttributeData::mutable_bytes() {
  _set_bit(7);
  if (bytes_ == &_default_bytes_) {
    bytes_ = new ::std::string;
  }
  return bytes_;
}

// repeated .mint.metadata.ItemData items = 6;
inline int AttributeData::items_size() const {
  return items_.size();
}
inline void AttributeData::clear_items() {
  items_.Clear();
}
inline const ::mint::metadata::ItemData& AttributeData::items(int index) const {
  return items_.Get(index);
}
inline ::mint::metadata::ItemData* AttributeData::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::mint::metadata::ItemData* AttributeData::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mint::metadata::ItemData >&
AttributeData::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::mint::metadata::ItemData >*
AttributeData::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// ItemData

// repeated .mint.metadata.AttributeData attributes = 1;
inline int ItemData::attributes_size() const {
  return attributes_.size();
}
inline void ItemData::clear_attributes() {
  attributes_.Clear();
}
inline const ::mint::metadata::AttributeData& ItemData::attributes(int index) const {
  return attributes_.Get(index);
}
inline ::mint::metadata::AttributeData* ItemData::mutable_attributes(int index) {
  return attributes_.Mutable(index);
}
inline ::mint::metadata::AttributeData* ItemData::add_attributes() {
  return attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData >&
ItemData::attributes() const {
  return attributes_;
}
inline ::google::protobuf::RepeatedPtrField< ::mint::metadata::AttributeData >*
ItemData::mutable_attributes() {
  return &attributes_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace metadata
}  // namespace mint

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_config_2fmint_2dmetadata_2eproto__INCLUDED
